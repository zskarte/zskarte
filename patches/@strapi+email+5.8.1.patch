diff --git a/node_modules/@strapi/email/dist/server/index.js b/node_modules/@strapi/email/dist/server/index.js
index 4ffc53b..3678e92 100644
--- a/node_modules/@strapi/email/dist/server/index.js
+++ b/node_modules/@strapi/email/dist/server/index.js
@@ -24,21 +24,35 @@ const createProvider = (emailConfig) => {
   const providerName = emailConfig.provider.toLowerCase();
   let provider;
   let modulePath;
-  try {
-    modulePath = require.resolve(`@strapi/provider-email-${providerName}`);
-  } catch (error) {
-    if (error !== null && typeof error === "object" && "code" in error && error.code === "MODULE_NOT_FOUND") {
-      modulePath = providerName;
+
+  if (typeof __webpack_require__ === "function") {
+    const req = require.context("@strapi", true, /^\.\/provider-email-.*\.(js|json)$/);
+    process.env.DEBUG_PRINT_WEBPACK_CONTEXT && console.log("DEBUG: webpack context '@strapi'", req.id, req.keys());
+    if (req.keys().includes(`./provider-email-${providerName}/package.json`)){
+      const packageJson = req(`./provider-email-${providerName}/package.json`);
+      provider = req(`./provider-email-${providerName}/${packageJson.main.substring(2)}`);
     } else {
-      throw error;
+      throw new Error(`Could not load email provider "${providerName}" in webpack context. export DEBUG_PRINT_WEBPACK_CONTEXT=1 for debuging`);
+    }
+  } else {
+    try {
+      modulePath = require.resolve(`@strapi/provider-email-${providerName}`);
+    } catch (error) {
+      if (error !== null && typeof error === "object" && "code" in error && error.code === "MODULE_NOT_FOUND") {
+        modulePath = providerName;
+      } else {
+        throw error;
+      }
+    }
+    try {
+      provider = require(modulePath);
+    } catch (err) {
+      throw new Error(`Could not load email provider "${providerName}".`, err);
     }
   }
-  try {
-    provider = require(modulePath);
-  } catch (err) {
-    throw new Error(`Could not load email provider "${providerName}".`);
-  }
-  return provider.init(emailConfig.providerOptions, emailConfig.settings);
+  const initialized = provider.init(emailConfig.providerOptions, emailConfig.settings);
+  process.env.DEBUG_PRINT_STRAPI_MODULES && console.log(`DEBUG: modules: email/createProvider '${providerName}'`, initialized);
+  return initialized;
 };
 const bootstrap = async ({ strapi: strapi2 }) => {
   const emailConfig = strapi2.config.get("plugin::email");
